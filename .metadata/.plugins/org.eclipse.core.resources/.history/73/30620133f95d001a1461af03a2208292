
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;

public class Game extends JFrame {
	
	private static final long serialVersionUID = 1L;
	Graphics g;
	String[] ButtonArray = new String[] { "开始游戏", "结束游戏" };
	// 设置常量：次数、规格、间隙、开始x的坐标、开始y的坐标、圆角矩形的角度大小：
	final int COUNT = 4;
	final int SIZE = 100;
	final int GAP = 10;
	final int START_X = 100;
	final int START_Y = 100;
	final int BASE_ANGLE = 20;
	final int FONT_SIZE = 50;
	public int cpunter = 0;
	public int Numbers = 0;
	// String [] imgs = new String [COUNT*COUNT];
	// public int N = imgs.length;
	// 创建数组保存数字数据：
	int[][] gameData = new int[COUNT][COUNT];
//	private Image[] imgs;
	GameListener gl;

	public static void main(String[] args) {
		// 创建对象并调用画出界面的方法：
		Game ga = new Game();
		ga.InUI();
	}

	// 创建界面，画出界面的方法：
	public void InUI() {
		// 设置窗体名称、大小、位置居中，加流式布局，关掉窗体的操作：
		this.setTitle("2048");
		this.setSize(START_X * 2 + (GAP + SIZE) * COUNT - GAP, START_Y * 2 + (GAP + SIZE) * COUNT - GAP);
		this.setLocationRelativeTo(null);
		this.setLayout(new FlowLayout());
		this.setDefaultCloseOperation(3);
		// 加按钮
		JButton jbu1 = new JButton(ButtonArray[0]);
		jbu1.setPreferredSize(new Dimension(200, 25));
		this.add(jbu1);
		JButton jbu2 = new JButton(ButtonArray[1]);
		jbu2.setPreferredSize(new Dimension(200, 25));
		this.add(jbu2);
		// 创建监听器类的对象：
		gl = new GameListener();
		// 调用两次creatRandom()方法，创建游戏开始的两个随机数：
		creatRandom();
		creatRandom();
		// 设置窗体可见：
		this.setVisible(true);

		// 调用Game类的setG方法，传递数据：
		gl.setG(this);
		this.addKeyListener(gl);

		this.requestFocus();
	}

	// 重写paint方法：
	public void paint(Graphics g) {
		// 调用父类对象的paint方法：
		super.paint(g);
		// 遍历数组，画出4×4的圆角矩形的格子
		for (int i = 0; i < COUNT; i++) {
			for (int j = 0; j < COUNT; j++) {
				g.setColor(new Color(0xBBADA0));
				g.fillRoundRect(START_X + (GAP + SIZE) * i, START_Y + (GAP + SIZE) * j, SIZE, SIZE, BASE_ANGLE,
						BASE_ANGLE);
				// 重绘数字图形
				if (gameData[i][j] != 0) {
					g.setFont(new Font("Arial", Font.PLAIN, FONT_SIZE));
					g.setColor(Color.RED);
					g.drawString(gameData[i][j] + "", START_X + i * (GAP + SIZE) + (SIZE - FONT_SIZE) / 2,
							START_Y + j * (GAP + SIZE) + (SIZE - FONT_SIZE) / 2 + 40);
				}
			}
		}

	}

	// 创立创建生成随机数的方法：
	public void creatRandom() {
		// 创建Random对象：
		Random ran = new Random();
		// 生成随机坐标：
		int row = ran.nextInt(COUNT);
		int line = ran.nextInt(COUNT);
		// 判断当二维数组里的元素不为零时，即相应格子有数字时，重新生成随机坐标：
		while (gameData[row][line] != 0) {
			row = ran.nextInt(COUNT);
			line = ran.nextInt(COUNT);
		}
		// 将对应坐标的元素赋值成2或者4：
		gameData[row][line] = ran.nextInt(2) * 2 + 2;
		// 如果数组里面满了就不再进行此方法
		gl.checkNumber();
	}
	// public void cresawimg(){
	// //图片存放的目录
	// String dirUrl = "";
	// for(int i=0; i<COUNT ; i++){
	// //拼接图片文件名
	// String imgName = dirUrl+(int)Math.pow(2, i+1)+".png";
	// //创建图片并且存放到数组中
	// imgs[i] = new ImageIcon(imgName).getImage();
	// }
	// }
}
